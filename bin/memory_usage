#!/usr/bin/env ruby
require 'mail'
require 'parallel'

PID_FILE = File.expand_path('../../tmp/server.pid', __FILE__)

Mail.defaults do
  delivery_method :smtp,
                  address: '127.0.0.1',
                  port: 1025
end

def start_server
  # Remove the X to enable the parameters for tuning.
  # These are the default values as of Ruby 2.2.0.
  pid = Process.spawn(<<-EOC.split.join(' '))
    XRUBY_GC_HEAP_FREE_SLOTS=4096
    XRUBY_GC_HEAP_INIT_SLOTS=10000
    XRUBY_GC_HEAP_GROWTH_FACTOR=1.1
    XRUBY_GC_HEAP_GROWTH_MAX_SLOTS=0
    XRUBY_GC_HEAP_OLDOBJECT_LIMIT_FACTOR=2.0
    XRUBY_GC_MALLOC_LIMIT=4000100
    XRUBY_GC_MALLOC_LIMIT_MAX=16000100
    XRUBY_GC_MALLOC_LIMIT_GROWTH_FACTOR=1.1
    XRUBY_GC_OLDMALLOC_LIMIT=16777216
    XRUBY_GC_OLDMALLOC_LIMIT_MAX=134217728
    XRUBY_GC_OLDMALLOC_LIMIT_GROWTH_FACTOR=1.2
    ruby #{File.expand_path('../smtpserver', __FILE__)}
  EOC

  sleep 0.1 until File.exist?(PID_FILE)
  pid
end

def stop_server(pid)
  Process.kill 'TERM', server_pid
  Process.wait pid
end

def server_pid
  if File.exist?(PID_FILE)
    File.read(PID_FILE).to_i
  else
    0
  end
end

def memory_size_mb
  (`ps -o rss= -p #{server_pid}`.to_i * 1024).to_f / 2**20
end

def do_request
  compose_mail.deliver
end

def compose_mail
  @mail ||= begin
    mail = Mail.new(File.read(File.expand_path('../../examples/mail', __FILE__)))
    mail.return_path = 'none@example.com'
    mail
  end
end

aggregated_results = []

time = Time.now
# You can't just measure once: memory usage has some variance.
# We will take the mean of 7 runs.
7.times do
  options = {
    # in_threads: 24
    in_processes: 2
  }
  pid = start_server

  results = Parallel.map(1..200, options) do
    do_request
    memory_size_mb
  end

  final_mb = results.last
  aggregated_results << final_mb
  puts "Final Memory: #{final_mb} MB"

  stop_server(pid)
end

puts "Total time: #{(Time.now - time).round(2)}s."

mean_final_mb = aggregated_results.reduce(:+) / aggregated_results.size
puts "Mean Final Memory: #{mean_final_mb} MB"
